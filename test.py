# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys, cv2
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow
from ClassSer import *
from sinwave import *
import time
from pyqtgraph import PlotWidget
import numpy as np
import pyqtgraph as pq
import threading
import datetime
import queue
from PyQt5 import QtCore, QtGui, QtWidgets


# from Send_Thread import *

class SerThread:
    def __init__(self):
        # 利用一个队列来存储信息
        self.request_queue_lock = threading.Lock()
        self.request_queue = queue.Queue()
        self.ser_motor2 = serial_port()
        print("SerThread初始化")


class SendRequest(SerThread):
    def __init__(self):
        super(SendRequest, self).__init__()
        self.send_thread = None
        self.SendStart_flag = False
        print("SendRequest初始化")

    def run(self):
        print(f"Thread Send started.")
        i = 0
        while self.SendStart_flag:
            if not self.request_queue.empty():
                self.request_queue_lock.acquire()
                msg = self.request_queue.get()
                # 发送至电机
                # self.ser_motor2.senddata(msg)
                print(msg)
                self.request_queue_lock.release()

            else:
                print("位置请求")
                # self.ser_motor2.senddata('PFB<D8>\r')
            time.sleep(0.02)
            i = i + 1
        print(f"Thread Send finished.")


class Ui_Form(QtWidgets.QWidget, SendRequest):
    def __init__(self, MainWindow):
        self.setupUi(MainWindow)  # 启动Ui
        super(Ui_Form, self).__init__()
        self.SendThread = SerThread()
        self.pushButton.clicked.connect(self.start)
        self.pushButton_2.clicked.connect(lambda: self.request("电机运动"))
        self.start_flag = False
        # self.button_connect()
        print('调用MyMainWindow初始化函数')

        print("初始化")

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(400, 300)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(40, 50, 91, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 140, 91, 41))
        self.pushButton_2.setObjectName("pushButton_2")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "start"))
        self.pushButton_2.setText(_translate("Form", "Add request"))

    def start(self):
        if not self.start_flag:
            # 发送指令
            self.send_thread = threading.Thread(target=self.run)
            self.SendStart_flag = True
            self.send_thread.start()
            self.start_flag = True
        else:

            self.start_flag = False
            self.SendStart_flag = False
            self.send_thread.join()

    def request(self, request_msg):
        self.request_queue_lock.acquire()
        self.request_queue.put(request_msg)
        self.request_queue_lock.release()



def data_processing(data_block):
    datas = data_block.split('\n')
    position_data = datas[1].split(" ")[0]
    print(position_data)
    return position_data

def DataAnlysis( data, head):
    data2 = data.split('\n')
    matched_index = -1
    i = 0
    length = len(data2)
    while i < length:
        if head + '\r' == data2[i]:
            matched_index = i
            break
        i = i + 1
    if matched_index != -1:
        data3 = data2[matched_index + 1].split(' ')[0]
        return data3
    return 'error'
if __name__ == '__main__':
    # app = QApplication(sys.argv)
    # MainWindow = QMainWindow()
    # ui = Ui_Form(MainWindow)
    # MainWindow.show()
    # sys.exit(app.exec_())
    # 假设你的列表包含两个部分字符串
    # ReceiveCache = ''
    # ReceiveCache += 'MOVEINC 0.1 5<15>\r\n'
    # ReceiveCache += '-->PFB<D8>\r\n'
    # ReceiveCache += "0.212 [mm]\r\n"
    # ReceiveCache += "-->\r\n"
    # ReceiveCache += 'MOVEINC 0.1 5<15>\r\n'
    # ReceiveCache += '-->PFB<D8>\r\n'
    # ReceiveCache += "0.212 [mm]\r\n"
    # ReceiveCache += "-->\r\n"
    # print(ReceiveCache)
    # head = "PFB<D8>"
    # end = "[mm]"
    # start_index = ReceiveCache.find(head)
    # end_index = ReceiveCache.find(end)
    # print()
    # data_block = ReceiveCache[start_index:end_index + len(end)]
    # # print(data_block)
    # position_data = data_processing(data_block)
    # ReceiveCache = ReceiveCache[end_index+len(end):]
    # # print(position_data)
    # print(ReceiveCache)
    # data = "PFB<D8>\r\n0.212 [mm]\r\n"
    # res =DataAnlysis(data,"PFB<D8>")
    # print(res)
    MCenter=1.2900000
    F_control_signal=3.890000000
    F_v = 1.5
    temp = "MOVEABS %.3f" % (MCenter - F_control_signal)
    temp += ' ' + str(F_v)
    print(temp)